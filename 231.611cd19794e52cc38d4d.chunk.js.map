{"version":3,"file":"231.611cd19794e52cc38d4d.chunk.js","mappings":"6KAaA,IAAIA,EAEJ,MAwCMC,EAAO,IAAI,IAAK,mBAAmB,GAAM,K,aAC7C,OAAaA,EAAKC,OAAOC,mBAAmB,G,OAzCb,E,OAAA,E,EAAA,YAC/B,MAAM,KAACC,EAAI,MAAEC,EAAK,OAAEC,GAAUN,EAC9B,IAAIO,EACJ,IACE,oCAA0CH,GAC1C,MAAMI,QAAsB,kCAAwC,mCAAoC,CACtGC,OAAQ,OACRC,SAAU,SACVC,eAAgBN,GACf,CAACD,KAAAA,EAAMQ,cAAc,IAED,uBAApBJ,EAAcK,IACf,gCAAsCL,EAAcM,MACpDP,EAAiB,+BAGnB,MAAMQ,GACN,OAAQA,EAAiBC,MACvB,IAAK,0BACFD,EAAiBE,SAAU,EAC5BV,EAAiB,8BACjB,MAGF,QAAS,CACPW,QAAQC,MAAM,8BAA+BJ,GAC7C,MAAMK,EAAe,gBACD,oBAAjBA,EAAoCb,EAAiB,6BAC/B,oBAAjBa,IAAoCb,EAAiB,+BAC7D,QAKNc,SAASC,MAAOhB,MAAAA,OAAM,EAANA,EAAQiB,QAAS,YAAcC,mBAAmBlB,GAAU,GACzEC,GACDA,EAAekB,MAAMC,GAAMA,EAAEC,QAAQC,W,YApCR,K,qQA2C7BC,IACF7B,EAAO6B,EACP,yCAA+C,YAAa,CAAChB,EAAG,sBAAuBb,KAAAA,OAGzF","sources":["webpack://tweb/./src/pages/pageSignImport.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {putPreloader} from '../components/putPreloader';\r\nimport App from '../config/app';\r\nimport {STATE_INIT} from '../config/state';\r\nimport rootScope from '../lib/rootScope';\r\nimport {AuthState} from '../types';\r\nimport Page from './page';\r\n\r\nlet data: AuthState.signImport['data'];\r\n\r\nconst importWebToken = async() => {\r\n  const {dcId, token, tgAddr} = data;\r\n  let mountPageAfter: Promise<{default: Page}>;\r\n  try {\r\n    rootScope.managers.apiManager.setBaseDcId(dcId);\r\n    const authorization = await rootScope.managers.apiManager.invokeApi('auth.importWebTokenAuthorization', {\r\n      api_id: App.id,\r\n      api_hash: App.hash,\r\n      web_auth_token: token\r\n    }, {dcId, ignoreErrors: true});\r\n\r\n    if(authorization._ === 'auth.authorization') {\r\n      rootScope.managers.apiManager.setUser(authorization.user);\r\n      mountPageAfter = import('./pageIm');\r\n      // return;\r\n    }\r\n  } catch(err) {\r\n    switch((err as ApiError).type) {\r\n      case 'SESSION_PASSWORD_NEEDED': {\r\n        (err as ApiError).handled = true;\r\n        mountPageAfter = import('./pagePassword');\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        console.error('authorization import error:', err);\r\n        const defaultState = STATE_INIT.authState._;\r\n        if(defaultState === 'authStateSignIn') mountPageAfter = import('./pageSignIn');\r\n        else if(defaultState === 'authStateSignQr') mountPageAfter = import('./pageSignQR');\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  location.hash = tgAddr?.trim() ? '#?tgaddr=' + encodeURIComponent(tgAddr) : '';\r\n  if(mountPageAfter) {\r\n    mountPageAfter.then((m) => m.default.mount());\r\n  }\r\n};\r\n\r\nconst page = new Page('page-signImport', true, () => {\r\n  putPreloader(page.pageEl.firstElementChild, true);\r\n  importWebToken();\r\n}, (_data: typeof data) => {\r\n  data = _data;\r\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignImport', data});\r\n});\r\n\r\nexport default page;\r\n"],"names":["data","page","pageEl","firstElementChild","dcId","token","tgAddr","mountPageAfter","authorization","api_id","api_hash","web_auth_token","ignoreErrors","_","user","err","type","handled","console","error","defaultState","location","hash","trim","encodeURIComponent","then","m","default","mount","_data"],"sourceRoot":""}